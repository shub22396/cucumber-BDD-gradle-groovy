
/*
* This file was generated by the Gradle 'init' task.
*/
//import com.mongodb.MongoClient
//import com.mongodb.MongoClientURI
//import com.testvagrant.hoarder.datamanager.DataDocker









buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.testvagrant.optimus:OptimusGradle:3.1.0"
        classpath files('libs/hoarder-commons.jar')
        classpath files('libs/api-automation-1.0-SNAPSHOT.jar')
    }
}
plugins {
    id 'java'
    id "com.testvagrant.optimuscloud.plugin" version "1.0.0"
    id 'maven-publish'
}


configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}




apply plugin: 'idea'
apply plugin: 'groovy'
group 'com.testvagrant.optimuscloud'
version '1.0.0'
sourceCompatibility = 1.8
//optimus {
//    testFeed = System.getProperty("testFeed");
//    glue = "com.rapido.optimuscloud.steps"
//    classpath = sourceSets.test.runtimeClasspath
//    tags = System.getProperty("tags", "not @wip")
//    env = System.getProperty('env', 'staging')
//}


tasks.runDistribution.dependsOn 'clean', 'build', 'loadData', 'reserveBuild'
tasks.build.mustRunAfter 'clean'
tasks.reserveBuild.mustRunAfter 'build'
tasks.runDistribution.finalizedBy 'unReserveBuild'
tasks.unReserveBuild.finalizedBy 'distributionReport'
tasks.runDistribution.finalizedBy 'distributionReport'

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}


sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs += ['src/main/groovy'] }
    }
}



project.ext.cukeversion = "4.7.2"
configurations.all {
    resolutionStrategy {
        force 'org.codehaus.groovy:groovy-all:2.5.6'

    }
}






dependencies {
    //compile group: 'com.testvagrant.optimuscloud', name: 'testng-dashboard', version: '1.0.3'
    //compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    // compile group: 'nl.topicus.overheid', name: 'java-factory-bot', version: '0.2.0'
    // compile group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
    //compile 'cglib:cglib:3.2.4'
    // compile fileTree(dir: 'libs', include: '*.jar')
//    compile 'org.apache.kafka:kafka-clients:2.4.0'
//    compile 'com.testvagrant.stepdefs:stepdefs:1.0.8'
//    compile 'com.testvagrant.intents:intents:1.0.6'
//    testCompile('com.google.inject:guice:3.0')
//    testCompile(group: 'com.googlecode.lambdaj', name: 'lambdaj', version: '2.3.3')
//    testCompile(group: 'org.json', name: 'json', version: '20131018')
//    compile group: 'com.google.guava', name: 'guava', version: '21.0'
//    compile group: 'com.github.mifmif', name: 'generex', version: '1.0.1'
    testImplementation 'com.github.javafaker:javafaker:0.17.2'
    testImplementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.10.0'
    testImplementation "io.cucumber:cucumber-java8:${project.cukeversion}"
    testImplementation "io.cucumber:cucumber-junit:${project.cukeversion}"
    testImplementation "io.cucumber:cucumber-core:${project.cukeversion}"
    testImplementation "io.cucumber:cucumber-picocontainer:${project.cukeversion}"
    // testCompile group: 'io.cucumber', name: 'gherkin', version: '5.1.0'
    testImplementation "com.testvagrant.optimuscloud:optimus-monitor:1.0.0"
    testImplementation "com.testvagrant.optimuscloud:cucumber-dashboard:1.0.0"
    testImplementation "junit:junit:4.10"
    testImplementation "com.testvagrant.optimuscloud:java-client:1.1.0"
    testImplementation 'com.squareup.retrofit2:converter-protobuf:2.6.1'
    testImplementation 'com.squareup.retrofit2:retrofit:2.4.0'
    testImplementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    testImplementation group: 'redis.clients', name: 'jedis', version: '3.3.0'
     testImplementation 'org.codehaus.groovy:groovy-all:2.4.14'
//
//    testImplementation("org.slf4j:slf4j-api:1.7.30")
//    testImplementation("ch.qos.logback:logback-classic:1.2.3")
//    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
//    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")
//    testImplementation("io.cucumber:cucumber-java:6.9.1")
//    testImplementation("io.cucumber:cucumber-junit-platform-engine:6.9.1")
//    testImplementation("io.cucumber:cucumber-picocontainer:6.9.1")
//    testImplementation("org.seleniumhq.selenium:selenium-java:3.141.59")
//
//    testImplementation("org.apache.commons:commons-lang3:3.11")
//    testImplementation("com.googlecode.json-simple:json-simple:1.1.1")
//    testImplementation("io.appium:java-client:7.5.1")
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'io.qameta.allure:allure-cucumber6-jvm:2.13.8'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'io.cucumber:cucumber-junit:6.8.1'
    testImplementation 'io.cucumber:cucumber-java:6.8.1'
    testImplementation 'io.cucumber:cucumber-picocontainer:6.8.1'
    testImplementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    testImplementation 'io.appium:java-client:7.5.1'

}

group = 'com.lambdatest'
version = '1.0-SNAPSHOT'
description = '-examples-cucumber-junit4'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}



//static def getMongoClient() {
//    String uri = System.getProperty("uri", "mongodb://root:password@172.31.248.24:27017")
//    String database = "optimus" + "?authSource=admin"
//    MongoClientURI mongoClientURI = new MongoClientURI(String.format("%s/%s", uri, database))
//    MongoClient mongoClient = new MongoClient(mongoClientURI)
//    return mongoClient
//}


//task loadData() {
//    doLast {
//        1.times {
//            MongoClient mongoClient = getMongoClient()
//            DataDocker dataDocker = new DataDocker(getMongoClient())
//            dataDocker.createTestDataCollection()
//            dataDocker.loadData()
//            mongoClient.close()
//        }}}
task single(type: Test) {
    systemProperties System.getProperties()
    systemProperty "caps-type", System.getProperty("caps-type")
    systemProperty "env", System.getProperty("env")
    systemProperty("caps-type", "single")
    systemProperty("env", "remote")
    //System.properties["caps-type"] = "single"
    // System.properties["cucumber.filter.name"] = "End to End Scenario"
    include '**/RunCucumberTests*'
}
task parallel(type: Test) {
    // dependsOn(":clean")
    // group = "parallel"
    // classpath = sourceSets["test"].runtimeClasspath
    
    systemProperties System.getProperties()
    systemProperty "caps-type", System.getProperty("caps-type")
    systemProperty "env", System.getProperty("env")
    systemProperty("parallel", true)
    include '**/RunCucumberTests*'
}
